{"version":3,"sources":["firebase.js","components/LinkForm.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LinkForm","addOrEdit","currentId","initialstateValue","links","url","name","description","useState","values","setValues","handleInputChange","e","target","value","getLinkById","id","a","collection","doc","get","data","useEffect","className","onSubmit","preventDefault","str","RegExp","test","toast","warning","position","autoClose","hideProgressBar","type","placeholder","onChange","rows","Links","setLinks","setCurrentId","linkObject","set","success","update","info","onDeleteLink","window","confirm","delete","error","onSnapshot","querySnapshot","docs","forEach","push","map","link","key","onClick","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.34c46340.chunk.js","sourcesContent":["// Your web app's Firebase configuration\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyB1fYor-PL6hYA20eUbvcMF2UUEL7TGpOU\",\r\n    authDomain: \"firestore-crud-react-93f75.firebaseapp.com\",\r\n    databaseURL: \"https://firestore-crud-react-93f75.firebaseio.com\",\r\n    projectId: \"firestore-crud-react-93f75\",\r\n    storageBucket: \"firestore-crud-react-93f75.appspot.com\",\r\n    messagingSenderId: \"310063248722\",\r\n    appId: \"1:310063248722:web:f17c1515b4229f0f0df68b\"\r\n  };\r\n  // Initialize Firebase\r\n  const fb = firebase.initializeApp(firebaseConfig);\r\n  export const db = fb.firestore();","import React,{useState, useEffect} from 'react'\r\nimport { db } from '../firebase';\r\nimport {toast} from 'react-toastify'\r\nfunction LinkForm({addOrEdit,currentId,links}) {\r\n    const initialstateValue={\r\n        url:'',\r\n        name:'',\r\n        description:''\r\n    }\r\n    const [values,setValues]=useState(initialstateValue);\r\n    const handleInputChange= e=>{\r\n        const {name,value}=e.target;  // e.target, devuelve el nombre y el valor del input\r\n        setValues({...values, [name]:value})  // Copiamos los valores que trae el estado inicialmente y cambia los valores de los que lleno en el form.\r\n    }\r\n    const validURL = (str) => {\r\n        var pattern = new RegExp(\r\n          \"^(https?:\\\\/\\\\/)?\" + // protocol\r\n          \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\r\n          \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\r\n          \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\r\n          \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\r\n            \"(\\\\#[-a-z\\\\d_]*)?$\",\r\n          \"i\"\r\n        ); // fragment locator\r\n        return !!pattern.test(str);\r\n      };\r\n    const handleSubmit =e =>{\r\n        e.preventDefault();\r\n        // values, devuelve un objeto vacio de los campos del form\r\n        if (!validURL(values.url)) {\r\n            return toast.warning(\"¡URL Invalida!\", {\r\n                position: \"top-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: true\r\n            });\r\n        }\r\n        addOrEdit(values)\r\n        setValues({...initialstateValue})\r\n    }\r\n    const getLinkById= async (id)=>{\r\n        const doc = await db.collection('links').doc(id).get();\r\n        setValues({...doc.data()})\r\n    }\r\n    useEffect(()=>{\r\n        if(currentId === ''){\r\n            setValues({...initialstateValue});\r\n        }else{\r\n            getLinkById(currentId);\r\n        }\r\n    },[currentId]);\r\n    return (\r\n        <form className=\"card card-body\" onSubmit={handleSubmit}>\r\n            <h5 className=\"card-title\">Formularion de Links</h5>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-text bg-light\">\r\n                    <i className=\"material-icons\">insert_link</i>\r\n                </div>\r\n                <input type=\"text\" className=\"form-control\" placeholder='URL' name=\"url\" onChange={handleInputChange} value={values['url']}/>\r\n            </div>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-text bg-light\">\r\n                <i className=\"material-icons\">create</i>\r\n                </div>\r\n                <input type=\"text\" className='form-control'name='name' placeholder='Nombre del sitio Web'  onChange={handleInputChange} value={values['name']}/>\r\n            </div>\r\n            <div className=\"form-group\">\r\n    <textarea className='form-control' placeholder='Descripcion' onChange={handleInputChange} name=\"description\" rows=\"3\" value={values['description']}></textarea>\r\n            </div>\r\n            <button className='btn btn-primary btn-block'>{currentId? 'Actualizar':'Guardar'}</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LinkForm\r\n","import React, {useEffect, useState} from 'react'\r\nimport LinkForm from './LinkForm';\r\nimport {toast} from 'react-toastify'\r\nimport {db} from '../firebase';\r\n\r\nfunction Links() {\r\n    const [links,setLinks]=useState([])\r\n    const [currentId,setCurrentId] =useState('');\r\n    const addOrEdit=async (linkObject)=>{\r\n        if (currentId==='') {\r\n            await db.collection('links').doc().set(linkObject);\r\n            // console.log(\"Tarea Guardada\");\r\n            toast.success(\"¡Nuevo Enlace Agregado!\",{\r\n                position: \"top-center\",\r\n                autoClose: 3000,\r\n                hideProgressBar: true\r\n            });\r\n        }else{\r\n            await db.collection('links').doc(currentId).update(linkObject);\r\n            toast.info(\"¡Enlace Actualizado Exitosamente!\",{\r\n                position: \"top-center\",\r\n                autoClose: 3000,\r\n                hideProgressBar: true\r\n            });\r\n            setCurrentId('');\r\n        }\r\n    }\r\n    const getLinks= ()=>{\r\n        db.collection('links').onSnapshot((querySnapshot) => {\r\n            // Usamos onSnapshot para que se cree un evento q controle los cambios de los datos que se extraigan\r\n            const docs=[];\r\n            querySnapshot.forEach(doc =>{\r\n                docs.push({...doc.data(),id:doc.id})\r\n            })\r\n            // console.log(docs);\r\n            setLinks(docs);\r\n        })\r\n    };\r\n    const onDeleteLink = async id =>{\r\n        if(window.confirm('¿Estas seguro de eliminar este Enlace?')){\r\n            await db.collection('links').doc(id).delete();\r\n            // console.log('Enlace Eliminado Exitosamente');\r\n            toast.error('¡Enlace Eliminado Exitosamente!',{\r\n                position:'top-center',\r\n                autoClose: 3000,\r\n                hideProgressBar: true,\r\n            });\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        getLinks();\r\n        // console.log('obteniendo datos');\r\n    },[])\r\n    return (\r\n        <>\r\n        <div className=\"col-md-4 p-2\">\r\n        <LinkForm {...{ addOrEdit, currentId, links }}/>\r\n        </div>\r\n        <div className=\"col-md-8 p-2\">\r\n            {links.map(link=>(\r\n                <div className=\"card mb-1\" key={link.id}>\r\n                    <div className=\"card-body\">\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                        <h4>{link.name}</h4>\r\n                        <div>\r\n                            <i className=\"material-icons text-danger mr-3 boton\" onClick={()=>onDeleteLink(link.id)}>close</i>\r\n                            <i className=\"material-icons boton\" onClick={()=>setCurrentId(link.id)}>edit</i>\r\n                        </div>\r\n                    </div>\r\n                    <p>{link.description}</p>\r\n                    <a href={link.url} target='_blank' rel=\"noopener noreferrer\">Ir al sitio web</a>\r\n                    </div>\r\n                </div>\r\n                ))}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Links\r\n","import React from 'react';\nimport './App.css';\nimport Links from './components/Links';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nfunction App() {\n\n  return (\n    <div className='container p-4'>\n      <div className=\"row\">\n        <Links/>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './firebase';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}